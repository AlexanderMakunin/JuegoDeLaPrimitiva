name: Java CI with Gradle

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main", "develop" ]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      checks: write
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Compile (falla si hay errores)
        run: ./gradlew build

      - name: Run Checkstyle (Forzar ejecuci√≥n)
        id: checkstyle
        continue-on-error: true
        run: ./gradlew checkstyleMain --rerun-tasks

      - name: Verificar contenido del Checkstyle Report
        run: |
          echo "üìÇ Archivos en build/reports/checkstyle:"
          ls -l build/reports/checkstyle/
          echo "üìÑ Contenido de main.xml:"
          cat build/reports/checkstyle/main.xml || echo "‚ö†Ô∏è El archivo no existe o est√° vac√≠o."

      - name: Convertir Checkstyle Report a Markdown
        id: format_checkstyle
        run: |
          REPORT_FILE="build/reports/checkstyle/main.xml"
          OUTPUT_FILE="checkstyle_report.md"

          echo "### üìù Checkstyle Report" > $OUTPUT_FILE
          echo "" >> $OUTPUT_FILE

          if [ -f "$REPORT_FILE" ]; then
            ERRORS=$(grep '<error' $REPORT_FILE | wc -l)
            
            if [ "$ERRORS" -gt 0 ]; then
              echo "#### $ERRORS problemas de estilo encontrados:" >> $OUTPUT_FILE
              echo "" >> $OUTPUT_FILE
              
              # Procesamos las violaciones l√≠nea por l√≠nea
              cat $REPORT_FILE | grep -o '<file name="[^"]*"[^>]*>' | while read -r file_line; do
                FILE_PATH=$(echo "$file_line" | sed -E 's/.*name="([^"]+)".*/\1/')
                FILE_NAME=$(basename "$FILE_PATH")
                echo -e "\n**üìÑ $FILE_NAME**\n" >> $OUTPUT_FILE
                
                # Buscar todos los errores para este archivo
                cat $REPORT_FILE | grep -o "<file name=\"$FILE_PATH\".*</file>" | grep -o '<error[^>]*>' | \
                while read -r error_line; do
                  LINE_NUM=$(echo "$error_line" | sed -E 's/.*line="([^"]+)".*/\1/')
                  MESSAGE=$(echo "$error_line" | sed -E 's/.*message="([^"]+)".*/\1/')
                  SOURCE=$(echo "$error_line" | sed -E 's/.*source="([^"]+)".*/\1/' | awk -F'.' '{print $NF}')
                  
                  echo "- **L√≠nea $LINE_NUM**: $MESSAGE [$SOURCE]" >> $OUTPUT_FILE
                done
              done
            else
              echo "‚úÖ No se encontraron problemas de Checkstyle." >> $OUTPUT_FILE
            fi
          else
            echo "‚ö†Ô∏è No se encontr√≥ el archivo de reporte de Checkstyle." >> $OUTPUT_FILE
          fi

      - name: Publicar Checkstyle Report en el Pull Request
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          path: checkstyle_report.md
          recreate: true  # Asegura que el comentario se actualice en lugar de crear varios nuevos
          ignore_empty: false  # No ignorar si el reporte est√° vac√≠o
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
